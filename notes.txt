0. x - set up react app w/ vite
1. x - set up vanilla node.js server
2. x - connect backend to frontend
3. x - nodemon
4. x - set up db and connect to backend (postgres - can do more, open source. mysql - simpler. companies prefer postgres i'd imagine)
5. x - frontend is connected to backend is connected to db (locally)
6. x - deploy and all is connected
7. x - identify entities for db, explain sql, then show data needed per screen in figma
8. x - play around w/ db then make script to populate it (first cmd is drop table)
9. build backend for front page w/o express nor sequelize (actually write sql queries)
  - rewrite to use pg.Pool
    - https://node-postgres.com/apis/pool
    - https://chat.openai.com/?model=text-davinci-002-render-sha
  - first, vid explaining the queries in the design
  - then explain get, post (new entry), put (replace existing entry), delete, patch (modify PART OF existing entry)
  - comment the routes we need
  - make the routes
    - hyphen as word delimiter is preferred
10. postman - test the routes (can test w/ backend url as well, but benefits below). benefits:
  - collections (don't need to rewrite queries, organization)
  - visualize data
  - share and collab
11. rewrite w/ express & sequelize
  - define & implement db schemas (sequelize, mvc)
  - express benefits - easy org, plugin libraries (middleware), cors middleware makes life easier
  - sequelize benefits - define relationships like oop, don't have to use sql except for more complicated queries
12. mention indexes for db
13. build the frontend (start w/ react router)
14. mention firebase / supabase and other options
  - pro - easy to get going
  - con - can get expensive once locked in and app scales
15. build auth
16. add logging
17. add swagger